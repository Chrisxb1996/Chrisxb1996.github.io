{"meta":{"title":"XbsNotes","subtitle":"","description":"我还没秃！！！","author":"XbsNotes","url":"http://yoursite.com","root":"/"},"pages":[{"title":"","date":"2020-05-11T03:34:53.000Z","updated":"2020-05-11T15:14:52.323Z","comments":false,"path":"Coding/index.html","permalink":"http://yoursite.com/Coding/index.html","excerpt":"","text":"Java基础Java 注解(Annotation)Java 反射 LeetCode刷题"},{"title":"","date":"2020-05-10T14:25:26.000Z","updated":"2020-05-11T04:42:00.966Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2020-05-10T14:10:33.000Z","updated":"2020-05-11T04:38:23.316Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"communication","date":"2020-05-11T03:26:51.000Z","updated":"2020-05-11T06:37:47.847Z","comments":false,"path":"communication/index.html","permalink":"http://yoursite.com/communication/index.html","excerpt":"","text":"天线阵列:论文笔记：Statistical Analysis of Array Gain for Cooperative MISO Transmitters without CSI"}],"posts":[{"title":"Java 反射","slug":"Java-反射","date":"2020-05-11T13:35:34.000Z","updated":"2020-05-11T15:11:17.182Z","comments":true,"path":"2020/05/11/Java-反射/","link":"","permalink":"http://yoursite.com/2020/05/11/Java-%E5%8F%8D%E5%B0%84/","excerpt":"虽然Java不是动态语言1，但Java语言具有一定的动态性，可以利用反射机制，字节码操作获得类似动态语言的特性，Java的动态性让编程更加灵活。","text":"虽然Java不是动态语言1，但Java语言具有一定的动态性，可以利用反射机制，字节码操作获得类似动态语言的特性，Java的动态性让编程更加灵活。 反射：指的是可以在程序运行时加载、探知、使用编译期间完全未知的类。加载完类之后，在堆内存中，就产生了一个 Class 类型的对象(一个类只有一个 Class 对象)，这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，形象的称为反射。反射机制的作用：重点在于动态性：动态加载类、动态获取类的信息（属性、方法、构造器）；动态创建对象；动态调用方法、构造器；动态处理属性；此外还能处理泛型、注解。获取Class对象：1.Class.forName();(常用)2.getClass();3..class;代码：javaBean: 1234567891011121314151617181920212223242526272829303132public class User &#123; private int id; private int age; private String name; //javabean一定要有无参构造器 public User() &#123; &#125; public User(int id, int age, String name) &#123; super(); this.id = id; this.age = age; this.name = name; &#125; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125;&#125; 获得User类的反射对象： 1234567String path = \"com.sxt.test.bean.User\";Class clazz = Class.forName(path);//方法一User u = new User();Class clazz2 = u.getClass();//方法二Class clazz3 = com.sxt.test.bean.User.class;//方法三 获得User类的属性： 1Field f = clazz.getDeclaredField(\"name\"); 获得User类的方法： 123Method m01 = clazz.getDeclaredMethod(\"getName\", null);//如果方法有参数，则必须传递参数类型对应的Class对象Method m02 = clazz.getDeclaredMethod(\"setName\", String.class); 获得User类指定的构造器： 1Constructor constructor = clazz.getDeclaredConstructor(int.class,int.class,String.class); 通过反射API动态的操作：构造器，方法，属性： 123456789101112131415//通过反射API调用构造方法，构造对象User u1 = (User) clazz.getConstructor().newInstance();//调用了User的无参构造器User u2 = (User)clazz.getConstructor(int.class,int.class,String.class).newInstance(1001,18,\"席博\");//调用了User带参构造器//通过反射API调用普通方法 invoke(对象，参数)方法User u3 = (User) clazz.getConstructor().newInstance();Method method = clazz.getDeclaredMethod(\"setName\", String.class);method.invoke(u3, \"aaa\");//u3.setName(\"aaa\");//通过反射API操作属性User u4 = (User) clazz.getConstructor().newInstance();Field f = clazz.getDeclaredField(\"name\");//通过反射获得属性f.setAccessible(true); //这个属性不需要做安全检查，可以直接访问f.set(u4, \"bbb\"); //通过反射直接写u4属性f.get(u4);//通过反射读取u4属性 通过读取注解的信息，模拟处理注解信息的流程，具体参见：Java 注解 1.动态语言：程序运行时，可以改变程序结构或变量类型。常见的动态语言：Python、ruby、javascript ↩","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"reflection","slug":"reflection","permalink":"http://yoursite.com/tags/reflection/"}]},{"title":"Java 注解","slug":"Java-注解","date":"2020-05-10T03:56:57.000Z","updated":"2020-05-11T07:26:38.552Z","comments":true,"path":"2020/05/10/Java-注解/","link":"","permalink":"http://yoursite.com/2020/05/10/Java-%E6%B3%A8%E8%A7%A3/","excerpt":"Annotation的作用1.不是程序本身，可以对程序作出解释。(这一点，跟注释没什么区别)2.可以被其他程序(比如：编译器，其他类(通过反射))读取。(注解信息处理流程，是注解和注释的重大区别如果没有注解信息处理流程，则注解毫无意义)","text":"Annotation的作用1.不是程序本身，可以对程序作出解释。(这一点，跟注释没什么区别)2.可以被其他程序(比如：编译器，其他类(通过反射))读取。(注解信息处理流程，是注解和注释的重大区别如果没有注解信息处理流程，则注解毫无意义) Annotation的格式注解是以“@注释名”在代码中存在的，还可以添加一些参数值，例如：@SuppressWarnings(value=”unchecked”)。(抑制警告) Annotation在哪里使用可以附加在package, class, method, field等上面，相当于给它们添加了额外的辅助信息，我们可以通过反射机制编程实现对这些元数据的访问。 自定义注解格式：public @interface 注解名 {定义体}1.方法的名称就是参数的名称;2.返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String、enum）;3.可以通过default来声明参数的默认值1;4.如果只有一个参数成员，一般参数名为value; 元注解元注解的作用就是负责注解其他注解。 Java定义了4个标准的meta-annotation类型，它们被用来提供对其它 annotation类型作说明。1.@Target：用于描述注解的使用范围（即:被描述的注解可以用在什么地方）ElementType.TYPE；ElementType.FIELD…2.@Retention：表示需要在什么级别保存该注释信息，用于描述注解的生命周期SOURCE；CLASS；RUNTIME(可被反射机制读取)3.@Documented4.@Inherited 通过反射读取注解的流程：自定义类注解： 12345@Target(value = &#123;ElementType.TYPE&#125;)@Retention(RetentionPolicy.RUNTIME)public @interface test01Table &#123; String value();&#125; 自定义属性注解： 1234567@Target(value = &#123;ElementType.FIELD&#125;)@Retention(RetentionPolicy.RUNTIME)public @interface test01Field &#123; String columnName(); String type(); int length();&#125; 在test01中加入注解： 123456789@test01Table(\"tb_member\")public class test01 &#123; @test01Field(columnName = \"id\", type = \"int\", length = 10) private int id; @test01Field(columnName = \"sname\", type = \"varchar\", length = 10) private String name; @test01Field(columnName = \"age\", type = \"int\", length = 3) private int age;&#125; 读取test01中的注解： 12345678910111213141516171819202122232425262728/** * 通过反射读取自定义注解 */public class ReadAnnotation &#123; public static void main(String[] args) &#123; try &#123; Class clazz = Class.forName(\"com.sgg.annotation.test01\"); //获得类的有效注解 Annotation[] annotations = clazz.getAnnotations(); for(Annotation a : annotations)&#123; System.out.println(a); &#125; //获得类的制定注解 test01Table tt = (test01Table)clazz.getAnnotation(test01Table.class); System.out.println(tt.value()); //获得类的属性的对应注解 Field f = clazz.getDeclaredField(\"id\"); test01Field tf = (test01Field)f.getAnnotation(test01Field.class); System.out.println(tf.columnName() +\"--\"+ tf.type() +\"--\"+ tf.length()); //接下来可以利用注解信息写出DDL语句，完成相应的数据库操作 &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; 1.注解元素必须要有值。我们定义注解元素时，经常使用空字符串、0作为默认值。也经常使用负数(比如：-1)表示不存在的含义 ↩","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"annotation","slug":"annotation","permalink":"http://yoursite.com/tags/annotation/"}]},{"title":"用hexo搭建个人博客","slug":"用hexo搭建个人博客","date":"2020-05-09T08:50:49.000Z","updated":"2020-05-11T07:26:20.442Z","comments":true,"path":"2020/05/09/用hexo搭建个人博客/","link":"","permalink":"http://yoursite.com/2020/05/09/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","excerpt":"准备工作安装git：https://git-scm.com安装nodejs：https://nodejs.org/en/","text":"准备工作安装git：https://git-scm.com安装nodejs：https://nodejs.org/en/ 安装hexo1.以管理员身份运行：sudo su2.可以验证是否装好git和nodejs输入：git -version；node -v；npm -v；查看对应的版本是否一致3.在国内建议先安装淘宝镜像源 cnpm再进行安装hexo：输入：npm install -g cnpm –registry=https://registry.npm.taobao.org; 安装完后查 看是否安装成功： cnpm -v： 利用cnpm安装hexo博客 ：cnpm install -g hexo-cli 安装成功可查看hexo信息：hexo -v: 4.可以新建一个 文件夹作为存放目录：mkdir blog，进到目录中：cd blog/ (注意操作都在当前文件夹下进行操作)5.至此，hexo已经为你生成了基础博客框架，启动hexo输入 :hexo s6.在浏览器输入地址http://localhost:4000 可以看到基本框架已经生成。","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"nodejs","slug":"nodejs","permalink":"http://yoursite.com/tags/nodejs/"}]}],"categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"reflection","slug":"reflection","permalink":"http://yoursite.com/tags/reflection/"},{"name":"annotation","slug":"annotation","permalink":"http://yoursite.com/tags/annotation/"},{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"nodejs","slug":"nodejs","permalink":"http://yoursite.com/tags/nodejs/"}]}